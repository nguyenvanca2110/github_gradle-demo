pipeline{

	agent any

	tools {
	    gradle 'Gradle_8.0'
	    jdk 'JDK17'
	}

	environment {
		ACR_CREDENTIALS=credentials('ACR_GRADLE_APPLICATION')
		ACR_GRADLE_DEMO_URL = "gradledemoacr.azurecr.io"
		ACR_GRADLE_DEMO = "gradledemoacr"
		APPLICATION_NAME = "gradle_app"
		//COMMIT_HASH = sh(returnStdout: true, script: 'git rev-parse --short=4 HEAD').trim()
        //BRANCH = "${env.GIT_BRANCH}"
        //TAG = "${env.BRANCH}.${env.BUILD_NUMBER}".drop(15)
        //DEV_TAG = "${env.BRANCH}.${env.BUILD_NUMBER}".drop(7)
        //#VERSION = "${env.TAG}"
	}

	stages {

        stage('Gradle build image') {
        	steps {
        	    sh 'echo $PWD'
        		// sh 'cd ..'
        		// sh 'echo $PWD'
        		sh './gradlew clean'
        		sh './gradlew build'
        	}
        }

        stage('Docker build image') {
            steps {
                sh 'docker build -t $ACR_GRADLE_DEMO_URL/$ACR_GRADLE_DEMO/$APPLICATION_NAME:$BUILD_NUMBER .'
        	}
        }

		stage('Docker Hub Login') {
			steps {
				// sh 'echo $DOCKERHUB_CREDENTIALS_PSW'
				//sh 'echo $BRANCH'   sh 'echo $TAG' sh 'echo $DEV_TAG'
				sh 'docker login $ACR_GRADLE_DEMO_URL -u $ACR_CREDENTIALS_USR -p $ACR_CREDENTIALS_PSW'
				// sh 'docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
			}
		}

		stage('Docker Image Push') {
			steps {
				sh 'docker push $ACR_GRADLE_DEMO_URL/$ACR_GRADLE_DEMO/$APPLICATION_NAME:$BUILD_NUMBER'
			}
		}

		stage('Gradle K8S Deploy') {
		    steps{
		        script {
		            withKubeConfig([credentialsId: 'VIEN_AZURE_AKS', serverUrl: '']) {
                        sh ('kubectl apply -f k8s-deployment.yaml')
                    }
                }
            }
        }
	}

	post {
		always {
			sh 'docker logout'
		}
	}

}
